NA,          # xreg coefficients
NA)    # intercept
)
summary(model5)
model6 <- arima(
x = df4[,"sales"],
order = c(0, 0, 18),
xreg = df4[, c("sales_l18", "visits_predict")],
# fixed = c(0, c(rep(0, 17), NA), 0, 0, NA)
fixed = c(rep(0, 17), NA,  # MA terms
NA, NA,          # xreg coefficients
NA)
)
summary(model6)
summary(model5)
summary(model4)
model4 <- arima(
x = df4[,"sales"],
order = c(0, 0, 0),
xreg = df4[, c("sales_l18", "visits_predict")]
)
summary(model4)
model4 <- lm(
formula = sales ~ sales_l18 + visits_predict, data = df4
)
summary(model4)
summary(model5)
summary(model6)
# Plot the two graphs on a 2-column grid
gridExtra::grid.arrange(acf2, pacf2, nrow = 2)
plot(forecast::ggAcf(model2_resid^2))
plot(forecast::ggAcf(model2_resid))
plot(forecast::ggAcf(model2_resid^2))
plot(forecast::ggAcf(model2_resid))
plot(forecast::ggAcf(model2_resid^2))
model2_resid^2
model2_resid
# McLeod–Li “Lagrange multiplier test”
model7 = arima(
x = model2_resid^2,
order = c(20, 0, 0)
)
summary(model7)
rugarch
rugarch::ugarchspec
?ugarchspec
spec8 <- rugarch::ugarchspec(
mean.model = list(armaOrder = c(0, 0),
include.mean = TRUE,
external.regressors = df4[, c("sales_l18", "visits_predict")],
arfima = FALSE),
variance.model = list(model = "sGARCH", garchOrder = c(0, 1)),
distribution.model = "norm"
)
model8 <- ugarchfit(spec, y = y)
model8 <- rugarch::ugarchfit(spec, y = df4[,"sales"])
model8 <- rugarch::ugarchfit(spec8, y = df4[,"sales"])
?ugarchfit
model8 <- rugarch::ugarchfit(spec8, data = df4[,"sales"])
model8 <- rugarch::ugarchfit(spec8, data = df4$sales)
type(df4$sales)
class(df4$sales)
model8 <- rugarch::ugarchfit(spec8, data = list(df4$sales))
spec8 <- rugarch::ugarchspec(
mean.model = list(armaOrder = c(0, 0),
include.mean = TRUE,
external.regressors = as.matrix(df4[, c("sales_l18", "visits_predict")]),
arfima = FALSE),
variance.model = list(model = "sGARCH", garchOrder = c(0, 1)),
distribution.model = "norm"
)
model8 <- rugarch::ugarchfit(spec8, y = df4[,"sales"])
model8 <- rugarch::ugarchfit(spec8, data = df4[,"sales"])
df5 <- df4 %>% na.omit()
spec8 <- rugarch::ugarchspec(
mean.model = list(armaOrder = c(0, 0),
include.mean = TRUE,
external.regressors = as.matrix(df5[, c("sales_l18", "visits_predict")]),
arfima = FALSE),
variance.model = list(model = "sGARCH", garchOrder = c(0, 1)),
distribution.model = "norm"
)
model8 <- rugarch::ugarchfit(spec8, data = df5[,"sales"])
show(model8)
spec9 <- rugarch::ugarchspec(
mean.model = list(armaOrder = c(0, 0),
include.mean = TRUE,
external.regressors = as.matrix(df5[, c("sales_l18", "visits_predict")]),
arfima = FALSE),
variance.model = list(model = "sGARCH", garchOrder = c(1, 1)),
distribution.model = "norm"
)
model9 <- rugarch::ugarchfit(spec8, data = df5[,"sales"])
show(model9)
show(model8)
model9 <- rugarch::ugarchfit(spec9, data = df5[,"sales"])
show(model9)
model9$residuals
model9@fit$residuals
ggplot(y = model9@fit$residuals) +
geom_line()
model9_resid <- model9@fit$residuals
ggplot(y = model9_resid, x = 1:length(model9_resid)) +
geom_line()
ggplot(y = model9_resid, x = 1:length(model9_resid)) +
geom_line(color = "blue")
model9_resid
df6 <- rbind(
resid = model9_resid,
time = 1:length(model9_resid)
)
ggplot(aes(y = model9_resid, x = 1:length(model9_resid)) +
ggplot(aes(y = model9_resid, x = 1:length(model9_resid))) +
geom_line(color = "blue")
ggplot(aes(y = model9_resid, x = 1:length(model9_resid))) +
ggplot(aes(y = model9_resid, x = 1:length(model9_resid)))
ggplot(data = df6, aes(y = resid, x = time)) +
geom_line(color = "blue")
df6 <- data.frame(rbind(
resid = model9_resid,
time = 1:length(model9_resid)
))
ggplot(data = df6, aes(y = resid, x = time)) +
geom_line(color = "blue")
df6 <- data.frame(cbind(
resid = model9_resid,
time = 1:length(model9_resid)
))
ggplot(data = df6, aes(y = resid, x = time)) +
geom_line(color = "blue")
plot(forecast::ggAcf(model9_resid))
plot(forecast::ggAcf(model9_resid^2))
plot(forecast::ggAcf(model9_resid^2))
plot(forecast::ggAcf(model9_resid))
plot(forecast::ggAcf(model9_resid^2))
---
title: "Time Series Econometrics Exercise 2"
# Chunk 1: setup
knitr::opts_chunk$set(
message = FALSE,
warning = FALSE,
echo = FALSE
)
# Chunk 2
#| message: false
#| warning: false
#| results: false
#| echo: false
library(tidyverse)
# Chunk 3
#| message: false
#| warning: false
#| echo: false
df1 <- haven::read_dta("hw2_p1_data.dta")
library(tidyverse)
df_original <- readxl::read_excel(
path = "/Users/john/Documents/data/pwt/pwt1001.xlsx",
sheet = "Data"
)
df_with_capita_variables <- df_original %>%
mutate(
rnna_cap = rnna/pop,
rgdpe_cap = rgdpe/pop
)
df_missing_tfp <- df_with_capita_variables %>%
filter(
(is.na(rtfpna) & is.na(ctfp)) & !is.na(rnna_cap)
)
df_countries_no_tfp <- df_missing_tfp %>%
select(country) %>%
unique()
df_us_no_tfp <- df_missing_tfp %>%
filter(
country == "United States"
)
df_countries_no_tfp_obs_count <-
df_missing_tfp %>%
group_by(country) %>%
summarize(n = n())
df_bgd <- df_missing_tfp %>%
filter(country == 'Bangladesh') %>%
select(year, rgdpe_cap, rnna_cap) %>%
mutate(
d_rgdpe_cap = rgdpe_cap - lag(rgdpe_cap),
d2_rgdpe_cap = rgdpe_cap - 2*lag(rgdpe_cap) + lag(rgdpe_cap, 2L)
)
# plot(log(df_bgd$rgdpe_cap) - 2*log(lag(df_bgd$rgdpe_cap)) - log(lag(df_bgd$rgdpe_cap, 2L)), type = 'l')
# plot(df_bgd$d_rgdpe_cap/lag(df_bgd$rgdpe_cap), type = 'l')
plot(df_bgd$year, df_bgd$d2_rgdpe_cap, type = 'l')
tseries::adf.test(df_bgd$rgdpe_cap)
tseries::adf.test(df_bgd$d_rgdpe_cap %>% na.omit())
tseries::adf.test(df_bgd$d2_rgdpe_cap %>% na.omit())
# Bangladesh has structural shocks? Let's try with US first.
df_us <- df_with_capita_variables %>%
filter(country == "United States") %>%
select(year, rgdpe_cap, rnna_cap) %>%
mutate(
d_rgdpe_cap = rgdpe_cap - lag(rgdpe_cap),
d2_rgdpe_cap = rgdpe_cap - 2*lag(rgdpe_cap) + lag(rgdpe_cap, 2L),
d_rnna_cap = rnna_cap - lag(rnna_cap),
d2_rnna_cap = rnna_cap - 2*lag(rnna_cap) + lag(rnna_cap, 2L)
)
plot(df_us$year, df_us$d_rgdpe_cap, type = 'l')
tseries::adf.test(df_us$rgdpe_cap %>% na.omit())
tseries::adf.test(df_us$d_rgdpe_cap %>% na.omit())
plot(df_us$year, df_us$d2_rnna_cap, type = 'l')
tseries::adf.test(df_us$rnna_cap %>% na.omit())
tseries::adf.test(df_us$d_rnna_cap %>% na.omit())
tseries::adf.test(df_us$d2_rnna_cap %>% na.omit())
# Use VARselect, set max.lag to T^{1/3}
df_us_only_dep = df_us %>% select(d_rgdpe_cap, d2_rnna_cap) %>%
na.omit()
max_lag = floor(nrow(df_us_only_dep)^{1/3})
vars::VARselect(df_us_only_dep, lag.max = max_lag, type = "const")$selection
# Create VAR object
var_us <- vars::VAR(df_us_only_dep, p = 3)
bq_us <- vars::BQ(var_us)
innovations <- function(var, bq){
var_resid <- residuals(var)
bq_C0 <- bq$B
for(i in 1:nrow(var_us_resid)){
resid_vector = solve(bq_C0) %*% var_resid[i,]
if(i == 1){
bq_resid = t(resid_vector)
} else{
bq_resid = rbind(bq_us_resid, t(resid_vector))
}
}
return(bq_resid)
}
bq_us_resid = innovations(var_us, bq_us)
irf <- vars::irf(bq_us, "d2_rnna_cap", "d_rgdpe_cap")$irf %>%
unlist()
plot(x = 1:length(irf), irf, type = "l")
vars::BQ
Acoef
vars::Acoef
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/gmu/ECON695_EPA2/no_tax_oasdi/presentation")
score_1 = read.csv("scores/no_tax_on_oasdi.csv")
print(t(score_1))
knitr::kable(t(score_1))
knitr::kable(
t(score_1),
format = "latex",
booktabs = TRUE,
escape = FALSE
) %>%
cat("\\begin{table}[H] \\centering", .) %>%
cat("\\end{table}")
library(tidyverse)
library(tidyverse)
score_1 = read.csv("scores/no_tax_on_oasdi.csv")
knitr::kable(
t(score_1),
format = "latex",
booktabs = TRUE,
escape = FALSE
) %>%
cat("\\begin{table}[H] \\centering", .) %>%
cat("\\end{table}")
kableExtra
kableExtra::kable_styling
knitr::kable(
t(score_1),
format = "latex",
booktabs = TRUE,
escape = FALSE
) %>%
kableExtra::kable_styling(font_size = 8, latex_options = "hold_position")
?kable
?kable_styling
knitr::kable(
t(score_1),
format = "latex",
booktabs = TRUE,
escape = FALSE
) %>%
kableExtra::kable_styling(
font_size = 6,
wraptable_width = "2pt",
latex_options = "hold_position"
)
length(score_1)
nrow(score_1)
gen_scores <- function(score){
df = score %>% select(surplus)
names(df) = score$year
df_1 <- df[1:5,]
df_2 <- df[6:11,]
print(gen_table(df_1))
print(gen_table(df_2))
}
names(score_1)
df %>% select(surplus)
score_1 %>% select(surplus)
df = score_1 %>% select(surplus)
rownames(df) <- score_1$year
df
df
t(df)
?kable
dft = t(df)
rownames(dft)
colnames(dft)
#| results: asis
library(tidyverse)
score_1 = read.csv("scores/no_tax_on_oasdi.csv")
gen_table <- function(df){
knitr::kable(
t(df),
format = "latex",
booktabs = TRUE,
escape = FALSE,
col.names = TRUE
) %>%
kableExtra::kable_styling(
font_size = 12,
latex_options = "hold_position"
)
}
gen_scores <- function(score){
df = score %>% select(surplus)
rownames(df) = score$year
df_1 <- df[1:5,]
df_2 <- df[6:11,]
print(gen_table(df_1))
print(gen_table(df_2))
}
gen_scores(score_1)
gen_scores <- function(score){
df = score %>% select(surplus)
rownames(df) = score$year
df_1 <- df[1:5,]
df_2 <- df[6:11,]
print(gen_table(df_1))
print(gen_table(df_2))
}
gen_scores(score_1)
#| results: asis
library(tidyverse)
score_1 = read.csv("scores/no_tax_on_oasdi.csv")
score$year
df = score_1 %>% select(surplus)
df
rownames(df) = score_1$year
df
#| results: asis
library(tidyverse)
score_1 = read.csv("scores/no_tax_on_oasdi.csv")
gen_table <- function(df){
knitr::kable(
t(df),
format = "latex",
booktabs = TRUE,
escape = FALSE
) %>%
kableExtra::kable_styling(
font_size = 12,
latex_options = "hold_position"
)
}
gen_scores <- function(score){
df = score %>% select(surplus)
rownames(df) = score$year
df_1 <- df[1:5,]
df_2 <- df[6:11,]
print(gen_table(df_1))
print(gen_table(df_2))
}
gen_scores(score_1)
#| results: asis
library(tidyverse)
score_1 = read.csv("scores/no_tax_on_oasdi.csv")
gen_table <- function(df){
knitr::kable(
t(df),
format = "latex",
booktabs = TRUE,
escape = FALSE,
row.names = colnames(df)
) %>%
kableExtra::kable_styling(
font_size = 12,
latex_options = "hold_position"
)
}
gen_scores <- function(score){
df = score %>% select(surplus)
rownames(df) = score$year
df_1 <- df[1:5,]
df_2 <- df[6:11,]
print(gen_table(df_1))
print(gen_table(df_2))
}
gen_scores(score_1)
#| results: asis
library(tidyverse)
score_1 = read.csv("scores/no_tax_on_oasdi.csv")
gen_table <- function(df){
knitr::kable(
t(df),
format = "latex",
booktabs = TRUE,
escape = FALSE,
row.names = rownames(df)
) %>%
kableExtra::kable_styling(
font_size = 12,
latex_options = "hold_position"
)
}
gen_scores <- function(score){
df = score %>% select(surplus)
rownames(df) = score$year
df_1 <- df[1:5,]
df_2 <- df[6:11,]
print(gen_table(df_1))
print(gen_table(df_2))
}
gen_scores(score_1)
df_1 <- df[1:5,]
df_1
df
df %>% slice(1:5)
?kable_styling
score_1 = read.csv("scores/no_tax_on_oasdi.csv") %>%
rename(
surplus = Surplus
)
score_1 = read.csv("scores/no_tax_on_oasdi.csv") %>%
rename(
Surplus = surplus
)
gen_table <- function(df){
knitr::kable(
t(df),
format = "latex",
booktabs = TRUE,
escape = FALSE
) %>%
kableExtra::kable_styling(
font_size = 12,
latex_options = "hold_position",
position = "left"
)
}
score_1 = read.csv("scores/no_tax_on_oasdi.csv") %>%
rename(
"Savings (in bn)" = surplus
)
score_1 = read.csv("scores/no_tax_on_oasdi.csv") %>%
rename(
"Savings (in \\$bn)" = surplus
)
?kable
#| results: asis
library(tidyverse)
score_1 = read.csv("scores/no_tax_on_oasdi.csv") %>%
rename(
"Savings (\\$bn)" = surplus
)
gen_table <- function(df){
knitr::kable(
t(df),
format = "latex",
booktabs = TRUE,
digits = 0,
escape = FALSE
) %>%
kableExtra::kable_styling(
font_size = 12,
latex_options = "hold_position",
position = "left"
)
}
gen_scores <- function(score){
df = score %>% select("Savings (\\$bn)")
rownames(df) = score$year
df_1 <- df %>% slice(1:5)
df_2 <- df %>% slice(6:11)
print(gen_table(df_1))
print(gen_table(df_2))
}
gen_scores(score_1)
score_2 = read.csv("scores/crfb_reform_scores_all_fica.csv") #%>%
score_2 = read.csv("scores/crfb_reform_scores_all_fica.csv") %>%
rename(
"Savings (\\$bn)" = surplus
) %>%
mutate(year = as.numeric(year))
View(score_2)
score_2 = read.csv("scores/crfb_reform_scores_all_fica.csv") %>%
rename(
"Savings (\\$bn)" = revenue
)
View(score_2)
score_2 = read.csv("scores/crfb_reform_scores_all_fica.csv") %>%
rename(
"Savings (\\$bn)" = revenue
) %>%
mutate(year = as.numeric(year))
score_2[11, "year"] = "Ten year"
View(score_2)
gen_scores(score_2)
score = read.csv("scores/crfb_reform_scores_all_fica.csv") %>%
mutate(
year = as.numeric(year),
revenue = round(revenue/1e9, 1)
) %>%
rename(
"Savings (\\$bn)" = revenue
)
